**Ndarray 数组**
=======================
**1、Ndarray 介绍**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Ndarray 是一个多维的数组对象，是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。具有矢量算术运算能力和复杂的广播能力，并具有执行速度快和节省空间的特点。
 
**2、创建 Ndarray**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
创建一个 ndarray 可以通过调用 Numpy 的 array 函数：

numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)

参数说明：

+------------+---------------------------------+
|   名称     |      描述                       |
+============+=================================+
|  object    |数组或嵌套的数列                 |
+------------+---------------------------------+
|  dtype     | 数组元素的数据类型              |
+------------+---------------------------------+
|  copy      | 对象是否需要复制                |
+------------+---------------------------------+
|  order     | 创建数组的样式                  |
+------------+---------------------------------+
|  subok     | 默认返回一个与基类类型一致的数组|
+------------+---------------------------------+
|  ndmin     | 指定生成数组的最小维度          |
+------------+---------------------------------+

**实例1**

In[1]: import numpy as np 

MyArray1 = np.array([1,2,3])

MyArray1

Out[1]: array([1, 2, 3])

**实例2**

In[2]: import numpy as np 

MyArray2 =np.array(range(1,4))

MyArray2

Out[2]: array([1, 2, 3])

**实例3**  使用 arange 函数创建数值范围,从数值范围创建数组

numpy.arange(start, stop, step, dtype)

In[3]: import numpy as np 

MyArray3 = np.arange(1,4) 

MyArray3

Out[3]: array([ 1,  2,  3])

**实例4** 多个维度

In[4]: import numpy as np 

MyArray4 = np.array([[1,  2],  [3,  4]])

MyArray4

Out[4]: array([[1, 2],

       [3, 4]])

**实例5**  数组元素以 0 来填充

In[5]: import numpy as np 

MyArray5 = np.zeros((2,2)) 

MyArray5

Out[5]: array([[0., 0.],

       [0., 0.]])

**实例6**  数组元素以 1 来填充

In[6]: import numpy as np 

MyArray6 = np.ones((2,2)) 

MyArray6

Out[6]: array([[1., 1.],

       [1., 1.]])

**实例7**  数组元素以指定值来填充

In[7]: import numpy as np 

MyArray7 =np.full((2,3),2) 

MyArray7

Out[7]: array([[2, 2, 2],

       [2, 2, 2]])

**实例8**  创建空数组

In[8]: import numpy as np 

MyArray8 = np.empty([3,2]) 

MyArray8

Out[8]: array([[0., 0.],

       [0., 0.],

       [0., 0.]])

**实例9** 给定取值范围，创建随机数组

In[9]: import numpy as np 

rand=np.random.RandomState(30)

MyArray9 =rand.randint(0,100,[2,3])

MyArray9

Out[9]: array([[37, 37, 45],

       [45, 12, 23]])

**实例10** 创建一个等比数组

np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)

In[10]: import numpy as np 

MyArray10 = np.logspace(1,10,num = 10,  base  =  2) 

MyArray10

Out[10]: array([   2.,    4.,    8.,   16.,   32.,   64.,  128.,  256.,  512.,  1024.])

**实例11** 创建指定数值间隔的数组,数组是一个等差数列构成的

np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)

In[11]: import numpy as np 

MyArray11 =np.linspace(10,20,5)  

MyArray11

Out[11]: array([10. , 12.5, 15. , 17.5, 20. ])

**实例12** 将列表转换为 Ndarray

In[12]: import numpy as np 

x =  [1,2,3] 

MyArray12 = np.asarray(x)  

MyArray12

Out[12]:array([1, 2, 3])

**实例13** 将元组转换为 Ndarray

In[13]: import numpy as np 

x =  (1,2,3) 

MyArray13 = np.asarray(x)  

MyArray13

Out[13]:array([1, 2, 3])

**实例14** 将元组列表转换为 Ndarray

In[14]: import numpy as np 

x =  [(1,2,3),(4,5)] 

MyArray14 = np.asarray(x)  

MyArray14

Out[14]:array([(1, 2, 3), (4, 5)], dtype=object)

**实例15** 从缓冲区当中读取数据并创建数组

numpy.frombuffer 用于实现动态数组。

numpy.frombuffer 接受 buffer 输入参数，以流的形式读入转化成 ndarray 对象。

numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)

In[15]: import numpy as np 

s =  b'Hello World' 

MyArray15 = np.frombuffer(s, dtype =  'S1')  

MyArray15

Out[15]: 

array( [b'H', b'e', b'l', b'l', b'o', b' ', b'W', b'o', b'r', b'l', b'd'],  dtype='S1' )

**实例16** 从可迭代对象中读取数据并创建数组

numpy.fromiter(iterable, dtype, count=-1)

In[16]: import numpy as np 

# 使用 range 函数创建列表对象 

list=range(5)

it=iter(list)
 
# 使用迭代器创建 ndarray 

MyArray16 =np.fromiter(it, dtype=float)

MyArray16 

Out[16]:array([0., 1., 2., 3., 4.])

**3、Ndarray 数据类型**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
**基本类型**

+----------------+---------------------------------------------------------------+
|   名称         |      描述                                                     |
+================+===============================================================+
|  bool          |  布尔型数据类型（True 或者 False）                            |
+----------------+---------------------------------------------------------------+
|  int           | 默认的整数类型                                                |
+----------------+---------------------------------------------------------------+
|  intc          | 与 C 的 int 类型一样，一般是 int32 或 int 64                  |
+----------------+---------------------------------------------------------------+
| intp           | 用于索引的整数类型                                            |
+----------------+---------------------------------------------------------------+
| int8           | 字节（-128 to 127）                                           |
+----------------+---------------------------------------------------------------+
|  int16         | 整数（-32768 to 32767）                                       |
+----------------+---------------------------------------------------------------+
|  int32         | 整数（-2147483648 to 2147483647）                             |
+----------------+---------------------------------------------------------------+
|  int64         | 整数（-9223372036854775808 to 9223372036854775807             |
+----------------+---------------------------------------------------------------+
| uint8          | 无符号整数（0 to 255）                                        |
+----------------+---------------------------------------------------------------+
| int8           | 字节（-128 to 127）                                           |
+----------------+---------------------------------------------------------------+
|  uint16        | 无符号整数（0 to 65535）                                      |
+----------------+---------------------------------------------------------------+
|  uint32        | 无符号整数（0 to 4294967295）                                 |
+----------------+---------------------------------------------------------------+
| uint64         | 无符号整数（0 to 18446744073709551615）                       |
+----------------+---------------------------------------------------------------+
| float          | float64 类型的简写                                            |
+----------------+---------------------------------------------------------------+
|float16         | 半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位       |
+----------------+---------------------------------------------------------------+
|  float32       | 单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位       |
+----------------+---------------------------------------------------------------+
|float64	 | 双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位      |
+----------------+---------------------------------------------------------------+
| complex        | complex128 类型的简写，即 128 位复数                          |
+----------------+---------------------------------------------------------------+
| complex64	 | 复数，表示双 32 位浮点数（实数部分和虚数部分）                |
+----------------+---------------------------------------------------------------+
| complex128     | 复数，表示双 64 位浮点数（实数部分和虚数部分）                |
+----------------+---------------------------------------------------------------+

**每个内建类型都有一个唯一定义它的字符代码，如下：**

+----------------+-----------------------------------+
|   字符         |      对应类型                     |
+================+===================================+
|  b             |  布尔型                           |
+----------------+-----------------------------------+
|  i             | (有符号) 整型                     |
+----------------+-----------------------------------+
|  u             | 无符号整型 integer                |
+----------------+-----------------------------------+
| f              | 浮点型                            |
+----------------+-----------------------------------+
| c              | 复数浮点型                        |
+----------------+-----------------------------------+
|  m             | timedelta（时间间隔）             |
+----------------+-----------------------------------+
|  M             | datetime（日期时间）              |
+----------------+-----------------------------------+
|  O             | 	(Python) 对象                |
+----------------+-----------------------------------+
| S, a           | (byte-)字符串                     |
+----------------+-----------------------------------+
| U              | Unicode                           |
+----------------+-----------------------------------+
|  V             | 原始数据 (void)                   |
+----------------+-----------------------------------+

**实例1**

In[1]: import numpy as np 

MyArray1=np.zeros(10,dtype="int16") 

MyArray1

Out[1]: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int16)

**实例2**

In[2]: import numpy as np 

MyArray2=np.zeros(10,dtype="float") 

MyArray2

Out[2]: array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])

**实例3**

In[3]: import numpy as np 

MyArray3=np.array([1,2,3,None])

MyArray3

Out[3]: array([1, 2, 3, None], dtype=object)

**实例4**

In[4]: import numpy as np 

MyArray4=np.array([1,2,3,None,np.nan]) #not a number

MyArray4

Out[4]: array([1, 2, 3, None, nan], dtype=object)

**4、Ndarray 属性**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Numpy数组的维数称为秩（rank），秩就是轴的数量，即数组的维度，一维数组的秩为 1，二维数组的秩为 2，以此类推。

在 Numpy中，每一个线性的数组称为是一个轴（axis），也就是维度（dimensions）。比如说，二维数组相当于是两个一维数组，其中第一个一维数组中每个元素又是一个一维数组。所以一维数组就是 Numpy 中的轴（axis），第一个轴相当于是底层数组，第二个轴是底层数组里的数组。而轴的数量——秩，就是数组的维数。

很多时候可以声明 axis。axis=0，表示沿着第 0 轴进行操作，即对每一列进行操作；axis=1，表示沿着第1轴进行操作，即对每一行进行操作。

Ndarray 属性有：

+-------------------+--------------------------------------------+
|   属性            |      说明                                  |
+===================+============================================+
|  ndarray.ndim     |秩，即轴的数量或维度的数量                  |
+-------------------+--------------------------------------------+
|  ndarray.shape    | 数组的维度，对于矩阵，n 行 m 列            |
+-------------------+--------------------------------------------+
|  ndarray.size     | 数组元素的总个数，相当于 .shape 中 n*m 的值|
+-------------------+--------------------------------------------+
| ndarray.dtype     | ndarray 对象的元素类型                     |
+-------------------+--------------------------------------------+
|  ndarray.itemsize | ndarray 对象中每个元素的大小，以字节为单位 |
+-------------------+--------------------------------------------+
|  ndarray.flags    | ndarray 对象的内存信息                     |
+-------------------+--------------------------------------------+
|  ndarray.real     | ndarray元素的实部                          |
+-------------------+--------------------------------------------+
|  ndarray.imag     | ndarray 元素的虚部                         |
+-------------------+--------------------------------------------+

**实例1** 返回数组的维数

In[1]: import numpy as np 

a = np.arange(24)  

print (a.ndim)             # a 现只有一个维度

# 现在调整其大小

b = a.reshape(2,4,3)  # b 现在拥有三个维度

print (b.ndim)

Out[1]:  1   3

**实例2** 

ndarray.shape 表示数组的维度，返回一个元组，这个元组的长度就是维度的数目，即 ndim 属性(秩)。比如，一个二维数组，其维度表示"行数"和"列数"。

In[2]: import numpy as np 

a = np.array([[1,2,3],[4,5,6]])  

print (a.shape)

Out[2]: (2, 3)

**实例3** 

ndarray.shape 也可以用于调整数组大小。

In[3]:import numpy as np

a = np.array([[1,2,3],[4,5,6]]) 

a.shape =  (3,2)  

print (a)

Out[3]: [[1 2]

        [3 4]

        [5 6]]

**实例4** reshape 函数调整数组大小

In[4]:import numpy as np

a = np.array([[1,2,3],[4,5,6]]) 

b = a.reshape(3,2)  

print (b)

Out[4]: [[1 2]

        [3 4]

        [5 6]]

**实例5**

ndarray.itemsize 以字节的形式返回数组中每一个元素的大小。

In[5]:import numpy as np

import numpy as np 
 
# 数组的 dtype 为 int8（一个字节）

x = np.array([1,2,3,4,5], dtype = np.int8)  

print (x.itemsize)
 
# 数组的 dtype 现在为 float64（八个字节） 

y = np.array([1,2,3,4,5], dtype = np.float64) 

print (y.itemsize)

Out[5]: 1  8




